#+TITLE: 如何阅读和修改kaldi源代码
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/worg.css" />
#+OPTIONS: ^:{}

* 使用eclipse查看kaldi源码
** import makefile
#+ATTR_HTML: :width 60% 
[[./img/kaldi_modify_code/import.png]]
** project name & makefile location
#+ATTR_HTML: :width 60%
[[./img/kaldi_modify_code/location.png]]
** result
#+ATTR_HTML: :width 60%
[[./img/kaldi_modify_code/result.png]]

* vim tags
1. 在src目录下使用命令ctags -R
2. Ctrl+]跳入    Ctrl+t 返回

* 修改kaldi源码[[http://kaldi.sourceforge.net/tutorial_code.html][Reading and modifying the code]]
1. kaldi中使用-O0,调试可以使用gdb调试
2. 可以在Makefile TESTFILES中添加自己的test，然后make test
3. 路径是相对makefile路径
#+ATTR_HTML: :width 60%
[[./img/kaldi_modify_code/test.png]]
#+ATTR_HTML: :width 60%
[[./img/kaldi_modify_code/make_test.png]]

* Google C++ 编程规范
1. 函数超过10行时不要使用內联
2. -inl.h內联函数实现文件 | 定义函数模板
3. 输入：const型，输出参数：指针
4. 最好给纯接口类加上Interface后缀
5. 名称为foo_的变量其访问函数为foo()，而其修改器(mutator)则为set_foo()，访问器常在头文件中定义为内联函数。
6. 请按下面的规则次序来定义类：公共成员位于私有成员前；方法位于数据成员前(变量)等等。
7. scoped_ptr | shared_ptr
8. 使用cpplint.py来检测风格错误
9. 类型转换(Casting),需要类型转换时请使用static_cast<>()
10. 类成员以下划线结束 int val_;
11. 禁止使用异常
12. 常量命名, 在名称前加k：kDaysInAWeek
#+BEGIN_SRC cpp
const int kDaysInAWeek = 7;
#+END_SRC
13. 函数形式参数位置和花括号位置
#+BEGIN_SRC cpp
ReturnType ClassName::ReallyLongFunctionName(Type par_name1) {
}
#+END_SRC

* kaldi中的数据准备
数据准备只需修改三个文件，推荐在wsj基础上修改。
** data_prepare
1. uttid
2. scp
3. text
4. utt2spk
** prepare_dict
1. silence_phones.txt & optional_silence.txt
2. lexicon.txt
3. phones.txt
4. extra_questions.txt
** format_data
1. 分门别类整理
2. 检查：utils/validate_data_dir.sh
